// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// from gst-gir-files (https://gitlab.freedesktop.org/gstreamer/gir-files-rs.git)
// DO NOT EDIT

use super::super::ffi;

use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GstAggregatorStartTimeSelection")]
pub enum AggregatorStartTimeSelection {
    #[doc(alias = "GST_AGGREGATOR_START_TIME_SELECTION_ZERO")]
    Zero,
    #[doc(alias = "GST_AGGREGATOR_START_TIME_SELECTION_FIRST")]
    First,
    #[doc(alias = "GST_AGGREGATOR_START_TIME_SELECTION_SET")]
    Set,
    #[doc(hidden)]
    __Unknown(i32),
}

#[doc(hidden)]
impl IntoGlib for AggregatorStartTimeSelection {
    type GlibType = ffi::GstAggregatorStartTimeSelection;

    fn into_glib(self) -> ffi::GstAggregatorStartTimeSelection {
        match self {
            Self::Zero => ffi::GST_AGGREGATOR_START_TIME_SELECTION_ZERO,
            Self::First => ffi::GST_AGGREGATOR_START_TIME_SELECTION_FIRST,
            Self::Set => ffi::GST_AGGREGATOR_START_TIME_SELECTION_SET,
            Self::__Unknown(value) => value,
        }
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GstAggregatorStartTimeSelection> for AggregatorStartTimeSelection {
    unsafe fn from_glib(value: ffi::GstAggregatorStartTimeSelection) -> Self {
        match value {
            ffi::GST_AGGREGATOR_START_TIME_SELECTION_ZERO => Self::Zero,
            ffi::GST_AGGREGATOR_START_TIME_SELECTION_FIRST => Self::First,
            ffi::GST_AGGREGATOR_START_TIME_SELECTION_SET => Self::Set,
            value => Self::__Unknown(value),
        }
    }
}

impl StaticType for AggregatorStartTimeSelection {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::gst_aggregator_start_time_selection_get_type()) }
    }
}

impl glib::value::ValueType for AggregatorStartTimeSelection {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for AggregatorStartTimeSelection {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for AggregatorStartTimeSelection {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}
